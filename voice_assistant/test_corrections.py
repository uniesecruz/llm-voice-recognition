"""
Teste espec√≠fico para verificar se a deprecia√ß√£o foi corrigida e se o √°udio funciona
"""
import sys
import os

# Adiciona o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_llm_deprecation_fix():
    """Testa se a corre√ß√£o da deprecia√ß√£o do LangChain funciona"""
    print("üîß TESTE DE CORRE√á√ÉO DA DEPRECIA√á√ÉO")
    print("=" * 50)
    
    try:
        print("\\n1. Testando importa√ß√£o do LLM Manager...")
        from llm_manager import LLMManager
        print("‚úÖ Importa√ß√£o bem-sucedida")
        
        print("\\n2. Inicializando LLM Manager...")
        llm_manager = LLMManager()
        print("‚úÖ LLM Manager inicializado")
        
        print("\\n3. Testando gera√ß√£o de resposta (novo m√©todo invoke)...")
        test_question = "Qual a capital do Brasil?"
        response = llm_manager.generate_response(test_question)
        
        print(f"Pergunta: {test_question}")
        print(f"Resposta: {response}")
        
        if response and "Brasil" in response:
            print("‚úÖ Resposta gerada corretamente sem warnings de deprecia√ß√£o")
            return True, response
        else:
            print("‚ùå Resposta n√£o gerada corretamente")
            return False, response
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()
        return False, None

def test_full_voice_assistant():
    """Testa o assistente completo"""
    print("\\nü§ñ TESTE DO ASSISTENTE COMPLETO")
    print("=" * 50)
    
    try:
        print("\\n1. Inicializando assistente...")
        from main import VoiceAssistant
        assistant = VoiceAssistant()
        print("‚úÖ Assistente inicializado")
        
        print("\\n2. Testando processamento de entrada...")
        test_input = "Qual a capital do Brasil?"
        
        print(f"Simulando entrada de voz: {test_input}")
        assistant.process_voice_input(test_input)
        
        print("\\n3. Limpando recursos...")
        assistant.cleanup()
        
        print("‚úÖ Teste completo realizado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste completo: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE DE CORRE√á√ïES - ASSISTENTE DE VOZ")
    print("=" * 60)
    
    # Teste 1: Corre√ß√£o da deprecia√ß√£o
    success1, response = test_llm_deprecation_fix()
    
    if success1:
        # Teste 2: Assistente completo
        success2 = test_full_voice_assistant()
        
        print("\\n" + "=" * 60)
        if success1 and success2:
            print("‚úÖ TODOS OS TESTES PASSARAM!")
            print("‚úÖ Deprecia√ß√£o corrigida")
            print("‚úÖ √Åudio funcionando")
            print("‚úÖ Sistema pronto para uso!")
        else:
            print("‚ùå Alguns testes falharam")
        print("=" * 60)
    else:
        print("\\n‚ùå Teste inicial falhou - verifique a configura√ß√£o")

if __name__ == "__main__":
    main()
